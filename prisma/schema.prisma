// Specify PostgreSQL as the provider
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User Model
model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.Text
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groups        GroupMember[]
  carts         Cart[]
  payments      Payment[]
  notifications Notification[]
  Group         Group[]
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String
  createdById Int
  createdAt   DateTime @default(now())

  createdBy User          @relation(fields: [createdById], references: [id])
  members   GroupMember[]
  Cart      Cart[]
}

// GroupMember Model (Many-to-Many Relation Table)
model GroupMember {
  id      Int @id @default(autoincrement())
  userId  Int
  groupId Int

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@unique([groupId, userId]) // Define the unique compound constraint
}

// Product Model
model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  carts CartItem[]
}

// Cart Model
model Cart {
  id        Int      @id @default(autoincrement())
  groupId   Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group   Group      @relation(fields: [groupId], references: [id])
  user    User       @relation(fields: [userId], references: [id])
  items   CartItem[]
  Payment Payment[]
}

// CartItem Model
model CartItem {
  id        Int @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int @default(1)

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

// Payment Model
model Payment {
  id        Int      @id @default(autoincrement())
  userId    Int
  cartId    Int
  amount    Float
  status    String   @default("PENDING")
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  cart Cart @relation(fields: [cartId], references: [id])
}

// Notification Model
model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
