// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// 1. User Model
model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  email     String   @unique @db.VarChar(150)
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groups    GroupMember[]
  carts     Cart[]
  payments  Payment[]
}

// 2. Group Model
model Group {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(100)
  createdById Int           // Creator user ID
  createdAt   DateTime      @default(now())

  members     GroupMember[]
  carts       Cart[]
  createdBy   User          @relation(fields: [createdById], references: [id])
}

// 3. GroupMember (Many-to-Many Relation)
model GroupMember {
  id      Int    @id @default(autoincrement())
  userId  Int
  groupId Int

  user    User   @relation(fields: [userId], references: [id])
  group   Group  @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

// 4. Product Model
model Product {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(200)
  description String?  @db.Text
  price       Float
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  carts       CartItem[]
}

// 5. Cart Model
model Cart {
  id        Int           @id @default(autoincrement())
  groupId   Int           // Group associated with this cart
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  group     Group         @relation(fields: [groupId], references: [id])
  items     CartItem[]
}

// 6. CartItem Model (Products in a Cart)
model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int      @default(1)

  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

// 7. Payment Model
model Payment {
  id        Int      @id @default(autoincrement())
  userId    Int      // Paying user
  cartId    Int      // Cart being paid for
  amount    Float
  status    String   @default("PENDING") // PENDING, COMPLETED, FAILED
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  cart      Cart     @relation(fields: [cartId], references: [id])
}

// 8. Notification Model
model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int      // Recipient user
  message   String   @db.VarChar(255)
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}
